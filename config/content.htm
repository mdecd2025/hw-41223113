<h1>About</h1>
<p>課程名稱: 協同產品設計實習 - Collaborative Product Design Practice</p>
<p>學員作業網站: <a href="https://mdecd2025.github.io/hw-41223113/content/index.html">https://mdecd2025.github.io/hw-41223113/content/index.html</a></p>
<p>學員作業倉儲: <a href="https://github.com/mdecd2025/hw-41223113">https://github.com/mdecd2025/hw-41223113</a></p>
<hr/>
<p>課程代號: cd2025</p>
<p>Teams 線上教學:</p>
<p style="padding-left: 30px;">以 "學號@nfu.edu.tw" 登入<span> </span><a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a><span> </span>Office 365</p>
<p style="padding-left: 30px;">Teams 團隊代碼: <span>p5z4eku</span></p>
<hr/>
<p>課程評分:</p>
<p style="padding-left: 30px;">Homework (30%) - 每週至少提交兩次與課程進度有關的內容, 完成後填回自評表單</p>
<p style="padding-left: 30px;">Exam (40%) - 建立包含操作流程影片、心得以及提供檔案下載的網頁後填回自評表單</p>
<p style="padding-left: 30px;">Final Report (30%) - 利用網頁內容進行簡報並提交 pdf 格式書面報告, 完成後填回自評表單</p>
<h1>Week</h1>
<h2>w3</h2>
<p><span style="background-color: #ffcc00;">目前班上尚未納組的學員學號:更新前</span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import urllib.request

# 設定 URL
url = "https://mde.tw/list/2a.txt"

# 讀取網站內容
response = urllib.request.urlopen(url)
data = response.read()  # 讀取原始資料

# 檢查是否為 bytes，若是則解碼
if isinstance(data, bytes):
    data = data.decode('utf-8')

# 分割行
data_lines = data.splitlines()

# 確保資料存在
if len(data_lines) &gt; 1:
    all_stud = data_lines[1:]  # 跳過標題列
    print("總共有 " + str(len(all_stud)) + " 名學員")
else:
    all_stud = []
    print("學員名單讀取失敗")

# 已分組學員帳號
grouped_accounts = {
    '41223154', '41271125', '41271158', '41271146', '41271131', 'CYG41223103', '41223102', 
'41023128', '41023137', '41223137', '41223157', '41223156', 'otakuyoyo', '41223141', 
'41223113', 'kim41223114', 'joeisme1208', '41223116', '41223144', '41223140', '41223143', 
'41223138', '41223134', '41223136', 'zhe41223118', 'Spirit0224', 'yuhao-08', '41223158', 
'Ren911308', '41223150', 'Manto8', 'CYA41223106', 'yan21ed', 'Lin41223107', '41223133', 
'hong41223129', '41223110', '41223147', 'Linjiahong41223125', 'CHN41223132', 
'Yu-Fang-Hong', '41023111', 'yckaooooo', 'kolas911205', '41023105', '40932134', '41223104', 
'yan41223101', '41223105', '41223153', '41223120', '41223152', 'G8People', 
'WSE41223112', '41223146', '41223119'
}

# 未分組學員清單
ungrouped_accounts = []

for student in all_stud:
    parts = student.split()  # 用空格分割學號和帳號
    if len(parts) == 1:
        student_id = parts[0]
        account = student_id  # 如果沒有帳號，將學號當作帳號
    elif len(parts) == 2:
        student_id, account = parts
    
    account = account.strip()
    
    # 如果帳號不在已分組帳號清單中，則加入未分組學員清單
    if account not in grouped_accounts:
        ungrouped_accounts.append(student_id)

# 顯示未分組學員的學號
print("未分組學員學號清單：", ungrouped_accounts)</pre>
<p>總共有 60 名學員<br/>未分組學員學號清單： ['41023220', '41223111', '41223124', '41223148']<br/>&lt;completed in 46.10 ms&gt;</p>
<p><span style="background-color: #ffcc00;">目前班上尚未納組的學員學號:以更新過後</span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html, document
import urllib.request

# 設定 URL
url = "https://mde.tw/list/2a.txt"

# 讀取網站內容
response = urllib.request.urlopen(url)
data = response.read().splitlines()  # 直接讀取並按行分割

# 確保資料存在
if len(data) &gt; 1:
    all_stud = data[1:]  # 跳過標題列
    print("總共有 " + str(len(all_stud)) + " 名學員")
else:
    all_stud = []
    print("學員名單讀取失敗")

# 已分組學員帳號列表
grouped_students_accounts = ['41223154', '41271125', '41271158', '41271146', '41271131', 'CYG41223103', '41223102', '41023128', '41023137', '41223137', '41223157', '41223156', 'otakuyoyo', '41223141', '41223113', 'kim41223114', 'joeisme1208', '41223116', '41223144', '41223140', '41223143', '41223138', '41223134', '41223136', 'zhe41223118', 'Spirit0224', 'yuhao-08', '41223158', 'Ren911308', '41223150', 'Manto8', 'CYA41223106', 'yan21ed', 'Lin41223107', '41223133', 'hong41223129', '41223110', '41223147', 'Linjiahong41223125', 'CHN41223132', 'Yu-Fang-Hong', '41023111', 'yckaooooo', 'kolas911205', '41023105', '40932134', '41223104', 'yan41223101', '41223105', '41223153', '41223120', '41223152', 'G8People', 'WSE41223112', '41223146', '41223119']

# 找到網頁中的特定位置
brython_div1 = document["brython_div1"]

# *動態插入未分組學員資料，並為帳號添加超連結*
for index, student in enumerate(all_stud, start=1):
    parts = student.split()  # 用空格分割學號和帳號

    if len(parts) == 2:
        student_id, account = parts
    else:
        student_id = parts[0]
        account = student_id  # 若沒有帳號，則使用學號當帳號

    if account not in grouped_students_accounts:  # 只顯示未分組的學員
        # 設定學號的超連結
        account_link = f"https://mdecd2025.github.io/hw-{account.strip()}"
        # 設定repo的超連結
        repo_link = f"https://github.com/mdecd2025/hw-{account.strip()}"
        
        # 插入學號和帳號的超連結，並加上repo的超連結
        brython_div1 &lt;= f"{index}. " + html.A(student_id.strip(), href=account_link) + " "
        brython_div1 &lt;= f"（" + html.A("repo", href=repo_link) + "）"
        brython_div1 &lt;= html.BR()  # 換行
    else:
        print(f"帳號 {account} 已分組，跳過顯示")</pre>
<h2>w5</h2>
<h4><span style="background-color: #ffcc00;">Webots Tutorial 1 ~3 (HW3)</span></h4>
<p><span style="background-color: #ffffff;">Q1:請<span>用繁體中文詳細說明下列資料: </span><a href="https://cyberbotics.com/doc/guide/introduction-to-webots">https://cyberbotics.com/doc/guide/introduction-to-webots </a></span></p>
<p><span style="background-color: #ffffff;">Q2:請<span>整理 </span><a href="https://cyberbotics.com/doc/guide/introduction-to-webots">https://cyberbotics.com/doc/guide/introduction-to-webots</a><span> 中重要的英文單字與用法, 並且針對其中所使用的英文文法逐句說明.</span></span></p>
<p><span style="background-color: #ffffff;">Q3:請<span>摘要出下列內容: (放入英文文章內容)</span></span></p>
<p><span style="background-color: #ffffff;">Q4:請<span>列出上述文章中的重要的英文單字與解釋, 以及出現在文句中的用法:</span></span></p>
<p><span style="background-color: #ffffff;">Q5:<span>說明如何採手動方式在 Webots 建立下列場景:</span></span></p>
<p><span style="background-color: #ffffff;">Q6:希<span>望可以手把手一步步說明該如何利用圖形介面 menu 建立這個場景, 過程中有那些要點必須特別注意?</span></span></p>
<p><span style="background-color: #ffcc00;">A1:由41223113回答</span></p>
<p><strong>Webots 用戶指南 R2025a</strong></p>
<h4 data-end="44" data-start="26">什麼是 Webots？</h4>
<p data-end="202" data-start="45">Webots 是一款專業的移動機器人模擬軟體，提供 3D 虛擬世界建構與物理模擬（質量、關節、摩擦係數等）。用戶可添加被動物件或主動機器人（輪式、腿式、飛行等），並為其配備感測器、驅動裝置（距離感測器、攝影機、馬達等），再透過程式控制機器人的行為。此外，Webots 內建多種機器人模型與範例程式，可快速上手。</p>
<p data-end="267" data-start="204">Webots 也支援與真實機器人（如 e-puck、DARwIn-OP、Nao）連接，讓用戶能將模擬結果應用於實體機器人。</p>
<h4 data-end="286" data-start="269">Webots 的應用</h4>
<p data-end="303" data-start="287">適用於學術研究與教育，涵蓋：</p>
<ul data-end="478" data-start="304">
<li data-end="337" data-start="304"><strong data-end="317" data-start="306">機器人原型開發</strong>（學術研究、汽車與航太產業、玩具等）</li>
<li data-end="365" data-start="338"><strong data-end="350" data-start="340">機器人運動學</strong>（雙足、四足、仿人機器人）</li>
<li data-end="392" data-start="366"><strong data-end="378" data-start="368">多智能體研究</strong>（群體智能、協作機器人）</li>
<li data-end="425" data-start="393"><strong data-end="406" data-start="395">自適應行為研究</strong>（基因演算法、神經網路、人工智慧）</li>
<li data-end="448" data-start="426"><strong data-end="437" data-start="428">機器人教學</strong>（編程、機器人學）</li>
<li data-end="478" data-start="449"><strong data-end="460" data-start="451">機器人競賽</strong>（如 Robotstadium）</li>
</ul>
<h4 data-end="501" data-start="480">Webots 需要的基本知識</h4>
<ul data-end="630" data-start="502">
<li data-end="582" data-start="502">需具備<span> </span><strong data-end="538" data-start="508">C、C++、Java、Python 或 MATLAB</strong><span> </span>的基礎編程能力來控制機器人（若不會編程，可使用 BotStudio 圖形化工具）。</li>
<li data-end="630" data-start="583">若要建立自訂機器人或物件，需具備基本<span> </span><strong data-end="624" data-start="604">3D 設計與 VRML97 語言</strong><span> </span>知識。</li>
</ul>
<h4 data-end="648" data-start="632">如何獲取用戶支持？</h4>
<ul data-end="854" data-start="649">
<li data-end="695" data-start="649"><strong data-end="659" data-start="651">付費支援</strong>：Cyberbotics 提供 Premier 服務與客製開發支援。</li>
<li data-end="854" data-start="696"><strong data-end="706" data-start="698">社群支援</strong>（不保證回覆）：
<ul data-end="854" data-start="719">
<li data-end="758" data-start="719"><strong data-end="747" data-start="721">Robotics StackExchange</strong>（最佳技術討論區）</li>
<li data-end="798" data-start="761"><strong data-end="785" data-start="763">GitHub Discussions</strong>（開發與文件相關問題）</li>
<li data-end="830" data-start="801"><strong data-end="820" data-start="803">GitHub Issues</strong>（僅限回報錯誤）</li>
<li data-end="854" data-start="833"><strong data-end="846" data-start="835">Discord</strong>（即時討論）</li>
</ul>
</li>
</ul>
<h4 data-end="875" data-start="856">Webots 模擬的組成</h4>
<ul data-end="1043" data-start="876">
<li data-end="938" data-start="876"><strong data-end="892" data-start="878">世界檔 (.wbt)</strong>：描述機器人與環境，包括物件的<span> </span><strong data-end="922" data-start="908">位置、外觀、物理特性</strong><span> </span>等（類似 VRML97）。</li>
<li data-end="1002" data-start="939"><strong data-end="950" data-start="941">控制器程式</strong>（C/C++/Java/Python/MATLAB）：用於控制機器人，可多個機器人共用相同控制程式。</li>
<li data-end="1043" data-start="1003"><strong data-end="1017" data-start="1005">物理插件（選用）</strong>：可調整 Webots 物理行為（C/C++）。</li>
</ul>
<h4 data-end="1072" data-start="1045">什麼是 Controller（控制器）？</h4>
<p data-end="1152" data-start="1073">控制器是控制機器人的程式，可用 C、C++、Java、Python 或 MATLAB 編寫。每個機器人啟動模擬時，Webots 會為其執行相應的控制程式。</p>
<ul data-end="1275" data-start="1154">
<li data-end="1183" data-start="1154"><strong data-end="1165" data-start="1156">編譯型語言</strong>（C、C++）：需編譯為執行檔。</li>
<li data-end="1223" data-start="1184"><strong data-end="1194" data-start="1186">直譯語言</strong>（Python、MATLAB）：需安裝對應的運行環境。</li>
<li data-end="1275" data-start="1224"><strong data-end="1234" data-start="1226">混合語言</strong>（Java）：需編譯為<span> </span><code data-end="1254" data-start="1246">.class</code><span> </span>或<span> </span><code data-end="1263" data-start="1257">.jar</code>，由 JVM 執行。</li>
</ul>
<p data-end="1319" data-start="1277">控制器程式存放於 Webots 專案內的<span> </span><strong data-end="1313" data-start="1298">controllers</strong><span> </span>目錄。</p>
<h4 data-end="1361" data-start="1321">什麼是 Supervisor Controller（監督控制器）？</h4>
<p data-end="1421" data-start="1362">若機器人的<span> </span><strong data-end="1392" data-start="1368">supervisor 欄位設為 TRUE</strong>，則其控制器為<span> </span><strong data-end="1409" data-start="1400">監督控制器</strong>，擁有額外權限，如：</p>
<ul data-end="1476" data-start="1422">
<li data-end="1448" data-start="1422">控制模擬運行（移動機器人、錄製模擬畫面等）。</li>
<li data-end="1476" data-start="1449">可用於高層級操作，而非單純模擬真實機器人行為。</li>
</ul>
<p data-end="1501" data-start="1478">監督控制器支援與一般控制器相同的編程語言。</p>
<h2>w16</h2>
<p><span>國立虎尾科技大學 - 機械設計工程系 - cd2025 W16 HW1 - 41223113</span></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/dThWMX-nFtY" width="560"></iframe></p>
<p><span>國立虎尾科技大學 - 機械設計工程系 - cd2025 W16 HW2 - 41223113</span></p>
<p><span><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/1WoBFcZwmZY" width="560"></iframe></span></p>
<p></p><h1>Tasks</h1>
<h2>task1</h2>
<h3>list</h3>
<p><span style="background-color: #ffcc00;">顯示我們全部組員的倉儲和網站:</span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"></pre>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html, document, ajax
 
# 目標 URL
url = "https://mde.tw/list/2a.txt"
 
# G2 組員學號清單
g2_members = {"41223113", "41223114", "41223116", "41223130", "41223141", "41223149"}
 
# 定義回呼函式來處理資料
def on_complete(req):
    if req.status == 200:
        data = req.text.splitlines()  # 以換行分割成數列
        all_stud = [line.strip() for line in data[1:] if line.strip()]  # 移除空白並排除空行
 
        # 取得網頁上的 div 來顯示內容
        brython_div1 = document["brython_div1"]
 
        # 過濾 G2 組員
        g2_list = []
        for student in all_stud:
            parts = student.split()  # 用空白分割
            if len(parts) == 2:
                student_id, student_account = parts
                if student_id in g2_members:
                    g2_list.append((student_id, student_account))
 
        # 顯示組員數量
        brython_div1 &lt;= f"G2 組別 - 組員共 {len(g2_list)} 名"
        brython_div1 &lt;= html.BR() * 2
 
        # 逐行顯示 G2 組員
        for student_id, student_account in g2_list:
            # 學號超連結
            student_id_link = html.A(student_id, href=f"https://mdecd2025.github.io/hw-{student_account}", target="_blank")
 
            # 帳號超連結
            github_link = html.A(student_account, href=f"https://github.com/mdecd2025/hw-{student_account}", target="_blank")
 
            # 插入內容
            brython_div1 &lt;= student_id_link + " : " + github_link
            brython_div1 &lt;= html.BR()
 
# 發送 AJAX 請求
ajax.get(url, oncomplete=on_complete)</pre>
<p><span style="background-color: #ffcc00;">G2 組別 - 組員共 6 名</span><br/><br/><a href="https://mdecd2025.github.io/hw-41223113" target="_blank">41223113</a><span> : </span><a href="https://github.com/mdecd2025/hw-41223113" target="_blank">41223113</a><br/><a href="https://mdecd2025.github.io/hw-kim41223114" target="_blank">41223114</a><span> : </span><a href="https://github.com/mdecd2025/hw-kim41223114" target="_blank">kim41223114</a><br/><a href="https://mdecd2025.github.io/hw-41223116" target="_blank">41223116</a><span> : </span><a href="https://github.com/mdecd2025/hw-41223116" target="_blank">41223116</a><br/><a href="https://mdecd2025.github.io/hw-joeisme1208" target="_blank">41223130</a><span> : </span><a href="https://github.com/mdecd2025/hw-joeisme1208" target="_blank">joeisme1208</a><br/><a href="https://mdecd2025.github.io/hw-41223141" target="_blank">41223141</a><span> : </span><a href="https://github.com/mdecd2025/hw-41223141" target="_blank">41223141</a><br/><a href="https://mdecd2025.github.io/hw-otakuyoyo" target="_blank">41223149</a><span> : </span><a href="https://github.com/mdecd2025/hw-otakuyoyo" target="_blank">otakuyoyo</a><br/><br/><br/></p>
<p>在 USB 隨身碟或個人電腦上完成 cd2025 課程所需的可攜系統配置:</p>
<p style="padding-left: 90px;">下載<span> </span><a href="http://229.cycu.org/portable_wcm2025.7z">portable_wcm2025.7z</a><span> </span>(330MB, 解開壓縮後 1.4GB)</p>
<p style="padding-left: 90px;"><a href="http://229.cycu.org/Webots_2025a.7z">Webots_2025a.7z</a><span> </span>(1.5 GB, 解開後約為 2.9GB, 可單獨運作)</p>
<p style="padding-left: 90px;"><a href="http://229.cycu.org/Webots_2025a_web.7z">Webots_2025a_web.7z</a><span> </span>(171 MB, 解開壓縮後約為 1GB, 必須連網運作)</p>
<p style="padding-left: 90px;"><a href="http://229.cycu.org/Blender4.2.7z">Blender4.2.7z</a></p>
<p><span style="background-color: #ffcc00;">心得:</span></p>
<p>透過教學影片把python升級，在升級 Python 版本時，我遇到了<span style="background-color: #00ccff;"> Python 3.10</span> 與 <span style="background-color: #00ccff;">3.13</span> 的<span style="background-color: #00ccff;">衝突問題</span>，導致 <code data-end="81" data-start="76">pip</code> 無法正常運行。詢問chatgpt後，錯誤的訊息顯示 <code data-end="111" data-start="96">python310.dll</code> 與 <code data-end="127" data-start="114">Python 3.13</code> 不兼容。為解決此問題，我檢查了系統中的 <span style="background-color: #00ccff;">Python 版本 (<code data-end="173" data-start="159">where python</code>)</span>，並調整 <code data-end="185" data-start="179">PATH</code> 變數，移除舊版本的路徑。最後，我重新安裝 <code data-end="212" data-start="207">pip</code>，或<span style="background-color: #00ccff;">直接使用 <code data-end="234" data-start="219">python -m pip</code> 執行命令</span>，成功修復環境並正常運行 Python 3.13。</p>
<h2>task2</h2>
<p><span style="background-color: #ffcc00;"> (使用 SSH 協定執行作業倉儲的推送):</span></p>
<p><span style="background-color: #ffcc00;"><img caption="false" height="288" src="/images/螢幕擷取畫面 2025-03-21 143212.png" width="400"/></span></p>
<p><span style="background-color: #ffcc00;"><img alt="" height="207" src="/images/螢幕擷取畫面 2025-03-21 143242.png" width="400"/></span></p>
<p><span style="background-color: #ffcc00;"><img alt="" height="359" src="/images/螢幕擷取畫面 2025-03-21 143144.png" width="398"/>\</span></p>
<p><span style="background-color: #ffcc00;"><img alt="" height="360" src="/images/螢幕擷取畫面 2025-03-21 143155.png" width="400"/></span></p>
<p><span style="background-color: #ffcc00;"><img alt="" height="360" src="/images/螢幕擷取畫面 2025-03-21 143202.png" width="400"/></span></p>
<p><span style="background-color: #ffcc00;"><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/z__ZWYdWw-4" width="560"></iframe></span></p>
<p><br/><br/><span style="background-color: #ffcc00;"></span>task3</p>
<h2>task4</h2>
<h2>task5</h2>
<h2>task6</h2>
<p></p>
<p><span style="background-color: #ffcc00;"></span></p>
<h1>Homework</h1>
<p>作業 (30%)</p>
<p>HW1 (5%): <span style="background-color: #ffff00;">建立由 Box 組成的平面四連桿機構 Webots 模擬場景</span></p>
<p style="padding-left: 30px;">part1:</p>
<p style="padding-left: 60px;">請各學員在 USB 隨身碟或個人電腦上完成 cd2025 課程所需的可攜系統配置:</p>
<p style="padding-left: 90px;">下載 <a href="http://229.cycu.org/portable_wcm2025.7z">portable_wcm2025.7z</a> (330MB, 解開壓縮後 1.4GB)</p>
<p style="padding-left: 90px;"><a href="http://229.cycu.org/Webots_2025a.7z">Webots_2025a.7z</a> (1.5 GB, 解開後約為 2.9GB, 可單獨運作)</p>
<p style="padding-left: 90px;"><a href="http://229.cycu.org/Webots_2025a_web.7z">Webots_2025a_web.7z</a> (171 MB, 解開壓縮後約為 1GB, 必須連網運作)</p>
<p style="padding-left: 90px;"><a href="http://229.cycu.org/Blender4.2.7z">Blender4.2.7z</a></p>
<p style="padding-left: 30px;">part2:</p>
<p style="padding-left: 60px;">請各學員完成可攜程式系統配置後, 利用 Webots R2025a 中寬度與高度都為 0.1m 的 box 物件建立一個簡單的平面四連桿機構模擬場景.</p>
<p style="padding-left: 60px;">base (基座) 長度 1m, link1 長度 0.4m, link2 長度 0.6m, link3 長度 0.9m, 各轉軸均為 HingeJoint, joint1 旋轉速度設定為 1radian/sec.</p>
<p style="padding-left: 30px;">part3:</p>
<p style="padding-left: 60px;">模擬場景啟動後, 按下 s 鍵機構開始作動, 按下 p 鍵後機構暫停.</p>
<p style="padding-left: 30px;">參考資料:</p>
<p style="padding-left: 60px;"><a href="/downloads/cd2025_hw1_demo.7z">cd2025_hw1_demo.7z</a></p>
<p>HW2 (5%): <span style="background-color: #ffff00;">建立由 CAD 繪製零件組成的平面四連桿機構 Webots 模擬場景</span></p>
<p style="padding-left: 30px;">各學員請利用 CAD 系統依據 HW1 的連桿尺寸與運動方式, 配置適當大小的旋轉軸以及基座後, 利用 Webots R2025a 完成一個簡單的平面四連桿機構模擬場景.</p>
<p style="padding-left: 30px;">參考資料:</p>
<p style="padding-left: 60px;"><a href="/downloads/fourbar_slvs.7z">fourbar_slvs.7z</a></p>
<p>HW3 (20%):<span style="background-color: #ffff00;">建立 Webots 桌上籃球遊戲機模擬系統</span></p>
<p style="padding-left: 30px;">請各分組利用CAD 系統建立一個能在電腦桌 (1600W X 700D X 740H mm) 上運作的投籃機構 (<a href="https://www.youtube.com/watch?v=LloG_Jn_TI0&amp;t=51s">參考影片</a>)後, 導入 Webots R2025a 套件, 建立一個能由使用者透過鍵盤按鍵操作, 且具備計分板的籃球遊戲機模擬系統.</p>
<p style="padding-left: 30px;">參考資料:</p>
<p>參考資料:</p>
<p style="padding-left: 30px;"><a href="/downloads/fourbar_ball_throwing_linkage.slvs">fourbar_ball_throwing_linkage.slvs</a></p>
<p style="padding-left: 30px;"><a href="/downloads/sixbar_ball_throwing_linkage.slvs">sixbar_ball_throwing_linkage.slvs</a></p>
<p style="padding-left: 30px;"><img alt="" height="264" src="/images/fourbar_ball_throwing_linkage.gif" width="400"/></p>
<h2>HW1</h2>
<p>HW1 (5%): <span style="background-color: #ffff00;">建立由 Box 組成的平面四連桿機構 Webots 模擬場景</span></p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 HW1 - 學員學號</p>
<p></p>
<p><span style="background-color: #00ffff;">hw1作業壓縮檔:</span></p>
<p><a href="/downloads/41223113-HW1.7z">/downloads/41223113-HW1.7z</a></p>
<p><span style="background-color: #00ffff;"><span>hw1-webots操作模擬影片</span></span></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/R_bDkRsMahM" width="560"></iframe></p>
<p><span style="background-color: #ffcc00;">心得:</span></p>
<p><span style="background-color: #ffffff;">這段 Webots 世界檔雖然展現了多關節機械臂的結構設計，但在多重關節端點指向同一 Solid（如 link3）時，容易產生 kinematic loop，造成物理模擬不穩定。此外，外部控制器若未及時連線，機器人將無法正常運作。背景與光源資源依賴 GitHub 外部連結，若失效會影響場景完整性。物理參數未細緻設定，也可能影響模擬真實度。這些細節都提醒我們，設計複雜機械結構時需謹慎考慮模擬平台的限制與資源管理。</span></p>
<p><span style="background-color: #ffcc00;">詢問建議:</span></p>
<p><span style="background-color: #ffffff;"><span>建議將 EXTERNPROTO 檔案下載到本地，引用本地路徑以提升穩定性；關節命名與結構應明確區分，避免重名或錯誤引用；此外，可加入預設控制器，確保即使外部控制器未連接，機器人也能執行基本動作，提升模擬的便利性與穩定性。</span></span></p>
<p><span style="background-color: #ffcc00;">hw1作業題問解答:</span></p>
<ol class="marker:text-textOff list-decimal">
<li>
<p class="my-0"><strong>在製作 HW1 之前是否實際練習 Tutorial1 與 Tutorial2?</strong><br/>必須先實際練習 Tutorial1 與 Tutorial2，熟悉 Webots 基本操作與控制器撰寫。</p>
</li>
<li>
<p class="my-0"><strong>Webots 是什麼樣的軟體？它主要用途為何？</strong><br/>Webots 是跨平台機器人模擬軟體，用於機器人建模、控制演算法開發與教學研究。</p>
</li>
<li>
<p class="my-0"><strong>在 Tutorial1 中，學習者需要操作的主要機器人模型名稱是什麼？</strong><br/>主要使用 e-puck 小型輪式移動機器人。</p>
</li>
<li>
<p class="my-0"><strong>如何在 Webots 中建立並執行一個新的模擬世界（world）？</strong><br/>新建 .wbt 世界檔，添加物件與機器人，指定控制器，按 Play 執行模擬。</p>
</li>
<li>
<p class="my-0"><strong>請說明如何讓機器人在模擬中移動，並指出相關的程式控制方式。</strong><br/>控制器設定馬達速度，透過時間步長迴圈更新馬達輸出，驅動機器人移動。</p>
</li>
<li>
<p class="my-0"><strong>Tutorial1 中，學習者需要修改哪些參數或檔案來控制機器人的行為？</strong><br/>修改控制器程式檔案，調整馬達與感測器邏輯，並在 world 檔指定控制器名稱。</p>
</li>
<li>
<p class="my-0"><strong>請簡述 Webots 控制器（controller）的功能及其與機器人的關係。</strong><br/>控制器讀取感測器資料並控制機器人動作，透過 API 與機器人互動。</p>
</li>
<li>
<p class="my-0"><strong>在 Tutorial2 中，機器人需要完成什麼樣的任務或行為？</strong><br/>完成環境感知與自主避障任務。</p>
</li>
<li>
<p class="my-0"><strong>Webots 中的 "Supervisor" 是什麼？它與一般機器人控制器有何不同？</strong><br/>Supervisor 是特殊控制器，能管理整個模擬環境，操作任意物件。</p>
</li>
<li>
<p class="my-0"><strong>請說明如何在 Webots 中進行感測器數據的讀取與應用（例如距離感測器、攝影機）。</strong><br/>取得感測器裝置並啟動，在迴圈中讀取數據並應用於控制邏輯。</p>
</li>
<li>
<p class="my-0"><strong>若要延伸 Tutorial2 讓機器人具備自主避障能力，你會怎麼設計與實作？</strong><br/>利用多個距離感測器判斷障礙物，設計避障策略，控制器中實作狀態機調整馬達速度。</p>
</li>
<li>
<p class="my-0"><strong>請說明 Webots 中「時間步長（timestep）」的意義，以及它對模擬的影響。</strong><br/>時間步長為模擬更新間隔，影響精度與速度，步長越小精度越高。</p>
</li>
<li>
<p class="my-0"><strong>如何在 Webots 中為機器人新增感測器？請說明基本步驟。</strong><br/>在 world 編輯器新增感測器節點，設定參數，控制器中取得並啟動感測器。</p>
</li>
<li>
<p class="my-0"><strong>請說明如何將 Webots 控制器程式從 Python 改為 C 語言，並指出相關設定。</strong><br/>建立 C 程式，指定控制器名稱，使用 C API 編寫並編譯。</p>
</li>
<li>
<p class="my-0"><strong>Tutorial1、2 中，若控制器程式有語法錯誤時，Webots 會如何反應？學員該如何排除？</strong><br/>顯示錯誤訊息，控制器無法執行，利用 Console 與 Debug 工具排錯。</p>
</li>
<li>
<p class="my-0"><strong>如何將 Webots 世界（world）或機器人設定檔分享給他人，確保對方可順利開啟模擬？</strong><br/>分享完整專案資料夾，包含 .wbt、.proto、controllers 等。</p>
</li>
<li>
<p class="my-0"><strong>如果想讓機器人在模擬時產生聲音或播放音樂，Webots 提供哪些方法？</strong><br/>使用 Sound 節點新增聲音來源，控制器可播放與停止音效。</p>
</li>
<li>
<p class="my-0"><strong>請說明如何在 Webots 中同時操作多個機器人，並讓它們各自執行不同控制器。</strong><br/>新增多機器人節點，分別指定不同控制器名稱，Webots 啟動多控制器。</p>
</li>
<li>
<p class="my-0"><strong>在 Webots 控制器中，如何獲得機器人的當前座標位置與朝向？</strong><br/>利用 Supervisor API 的 getPosition() 與 getOrientation()。</p>
</li>
<li>
<p class="my-0"><strong>請說明 Webots 控制器中感測器資料的單位（例如距離感測器、加速度計），以及如何正確解讀。</strong><br/>距離感測器以公尺或毫米為單位，加速度計為 m/s²，依規格解讀。</p>
</li>
<li>
<p class="my-0"><strong>如果想要錄製 Webots 模擬畫面並輸出成影片檔，該如何操作？</strong><br/>使用內建錄影功能或 Supervisor 指令錄製並輸出影片。</p>
</li>
<li>
<p class="my-0"><strong>Webots 中的 PROTO 文件有什麼作用？與 world 檔（.wbt）的關係為何？</strong><br/>PROTO 定義物件模板，world 檔引用 PROTO 建立場景物件。</p>
</li>
<li>
<p class="my-0"><strong>請說明如何在 Webots 中設定機器人的初始位置和方向。</strong><br/>修改機器人節點的 translation 與 rotation 屬性。</p>
</li>
<li>
<p class="my-0"><strong>在 Tutorial1 或 Tutorial2 中，如何讓機器人執行預設外的自訂動作？</strong><br/>修改控制器程式，新增自訂函式並在主迴圈呼叫。</p>
</li>
<li>
<p class="my-0"><strong>Webots 支援哪些主流程控制語言？各有何優缺點？</strong><br/>支援 C/C++、Python、Java、MATLAB。C/C++效能佳，Python易學，Java跨平台，MATLAB適合數學分析。</p>
</li>
<li>
<p class="my-0"><strong>機器人控制器程式如何與其他程式（如資料記錄、遠端伺服器）進行通訊？</strong><br/>使用 TCP/IP、UDP 或 WebSocket 協定進行資料交換。</p>
</li>
<li>
<p class="my-0"><strong>Webots 的模擬世界中燈光和陰影設定如何影響感測器或相機的數據？</strong><br/>影響相機影像亮度與對比度，可能影響視覺感測器辨識。</p>
</li>
<li>
<p class="my-0"><strong>如何在 Webots 中調整機器人或感測器的物理參數（如質量、摩擦係數）？</strong><br/>修改物件 physics 節點的 mass、friction 等屬性。</p>
</li>
<li>
<p class="my-0"><strong>請說明如何使用 Webots 的 Console 與 Debug 工具協助程式錯誤排除。</strong><br/>Console 顯示輸出與錯誤，Debug 可設定斷點與單步執行。</p>
</li>
<li>
<p class="my-0"><strong>Tutorial1、2 裡的機器人遇到物體時，碰撞偵測機制如何運作？</strong><br/>物理引擎偵測碰撞事件，感測器資料反映碰撞狀況，控制器可調整行為。</p>
</li>
<li>
<p class="my-0"><strong>若要將 Webots 模擬結果導出並進行數據分析，你會選擇哪些方法與工具？</strong><br/>在控制器中記錄感測器數據與狀態至檔案，使用 Python、MATLAB 等工具進行後續分析。</p>
</li>
</ol>
<h4 class="mb-xs mt-5 text-base font-[500] first:mt-0 dark:font-[475]"></h4><h2>HW2 task3</h2>
<p>HW2 (5%): <span style="background-color: #ffff00;">建立由 CAD 繪製零件組成的平面四連桿機構 Webots 模擬場景</span></p>
<p><span style="background-color: #00ffff;">利用fourbar_slvs資料夾內零件，繪製link-1</span></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/xYumahfXxqc" width="560"></iframe></p>
<p><span style="background-color: #00ffff;">利用fourbar_slvs資料夾內零件，繪製link-2</span></p>
<p><span style="background-color: #00ffff;"><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/omKs6J7mzXI" width="560"></iframe></span></p>
<p><span style="background-color: #00ffff;">利用fourbar_slvs資料夾內零件，繪製link-3</span></p>
<p><span style="background-color: #00ffff;"><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/vD76zw5Gtgs" width="560"></iframe></span></p>
<p><span style="background-color: #00ffff;">利用fourbar_slvs資料夾內零件，繪製base-1</span></p>
<p><span style="background-color: #00ffff;"><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/w07YgEw-Wx8" width="560"></iframe></span></p>
<p><span style="background-color: #00ffff;">利用fourbar_slvs資料夾內零件，繪製fourbar_linkage_design-1</span></p>
<p><span style="background-color: #00ffff;"><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/5WjbZU4CFzE" width="560"></iframe></span></p>
<p><span style="background-color: #00ffff;">利用fourbar_slvs資料夾內零件，繪製shaft-1</span></p>
<p><span style="background-color: #00ffff;"><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/Fe2TyEpW828" width="560"></iframe></span></p>
<p><span style="background-color: #00ffff;">利用fourbar_slvs資料夾內零件，繪製shaft-2</span></p>
<p><span style="background-color: #00ffff;"><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/C-FcF43e-d4" width="560"></iframe></span></p>
<p><span style="background-color: #00ffff;">利用fourbar_slvs資料夾內零件，繪製fourbar_linkage_design_w_assembiy</span></p>
<p><span><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/wx9L3Q-hpas" width="560"></iframe></span><span style="background-color: #00ffff;"><br/></span></p>
<p><span style="background-color: #00ffff;"><span>hw2作業壓縮檔:</span></span></p>
<p><span style="background-color: #ffffff;"><a href="/downloads/41223113.7z" style="background-color: #ffffff;">/downloads/41223113.7z</a></span></p>
<p><span style="background-color: #ffffff;"><a href="/downloads/41223113-HW2.7z" style="background-color: #ffffff;">/downloads/41223113-HW2.7z</a></span></p>
<p><span style="background-color: #00ffff;"><span>hw2-webots操作模擬影片</span></span></p>
<p><span><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/iWfdaVoTS7M" width="560"></iframe></span></p>
<p><span></span><span style="background-color: #ffcc00;">心得:</span></p>
<p><span>這份 Webots 世界檔展示了四連桿機構的建模，但多重關節指向同一 Solid，容易形成 kinematic loop，Webots 物理引擎對此支援有限，模擬時常出現不穩定或異常。外部資源與本地檔案路徑若有誤，模型將無法完整載入，影響仿真效果。物理參數未細緻設定，也會降低模擬的真實性。這些問題提醒我們，在設計複雜結構時需特別注意模擬平台的限制、資源管理及參數設定，以確保仿真穩定且可重現。</span></p>
<p><span style="background-color: #ffcc00;">詢問優化建議:</span></p>
<p><span>這段優化建議提醒我們應避免 kinematic loop，透過簡化結構或使用 Webots 支援的 Constraint 來提升模擬穩定性。同時，將 EXTERNPROTO 和 CAD 模型本地化，確保路徑正確，避免載入失敗。明確設定每個 Solid 的質量與慣性，增強物理真實感。基座物件應補齊 boundingObject 和 Physics 屬性，並且命名上應有意義且唯一，方便維護與擴展。這些措施可提升模擬的穩定性與可維護性。</span></p>
<p><span><span style="background-color: #ffcc00;">hw2作業題問解答:</span></span></p>
<p>Tutorial3：地面顏色感測與行為控制</p>
<p></p>
<p>主要學習目標：學習利用 ground sensor 偵測地面顏色，並根據顏色改變機器人行為。</p>
<p>偵測方式：使用安裝於機器人底部的 ground sensor 讀取反射光強度。</p>
<p>感測器作用：辨識地面顏色（如黑、白、灰），用於巡線或標記辨識。</p>
<p>程式操作：啟用感測器並讀取數值，根據數值判斷顏色。</p>
<p>行為改變：遇黑線時停下或轉向，遇白色繼續前進。</p>
<p>校正原因：環境光線與地面材質影響感測器數值，校正提升準確度。</p>
<p>sampling period 設定：啟用感測器時指定取樣週期。</p>
<p>判斷錯誤原因：感測器未校正、光線變化、材質反光異常、門檻設定不當。</p>
<p></p>
<p>Tutorial4：距離感測與避障行為</p>
<p><br/> 核心任務：利用距離感測器偵測障礙物，實作自動避障。</p>
<p>偵測方式：e-puck 配備多個紅外線距離感測器，取得周圍障礙物距離。</p>
<p>DistanceSensor 運作：回傳與障礙物距離成比例的數值（0~4096）。</p>
<p>程式操作：取得感測器裝置，啟用並讀取數值。<br/> <br/> 數值單位與轉換：數值為比例值，需校正轉換為實際距離。</p>
<p>sampling period 設定：啟用時設定取樣週期（毫秒）。</p>
<p>避障行為實作：根據感測器數值判斷障礙物方向，調整轉向。</p>
<p>雙側障礙物處理：後退並隨機轉向避免死角。</p>
<p>多感測器考量：提供完整環境資訊，提升避障精確度。</p>
<p>故障排除：檢查感測器啟用、校正門檻、演算法優化、馬達控制。</p>
<p></p>
<p>Tutorial5：多感測器整合與複雜任務</p>
<p>主題：結合多種感測器，實作複雜任務與有限狀態機（FSM）。</p>
<p>多感測器反應：根據地面顏色與障礙物狀態調整行為。</p>
<p>感測器融合：同時讀取多感測器數值，設計 FSM 進行狀態切換。</p>
<p>巡線與避障結合：巡線為主，遇障礙物暫停巡線避障。</p>
<p>衝突訊息決策：設定感測器優先權或依狀態機切換行為。</p>
<p>任務流程切換：以 FSM 控制狀態與行為。</p>
<p>FSM 設計：定義狀態，根據感測器輸入切換。</p>
<p>挑戰題目：如同時巡線避障，先分別實作再整合。</p>
<p>自主巡邏功能：路徑規劃、位置記錄、感測器融合、狀態控制。</p>
<p>感測器資料融合（Sensor Fusion）</p>
<p>將多種感測器數據整合，提升環境感知與決策能力。</p>
<p>應用於巡線避障、複雜任務狀態切換</p>
<p><span></span></p>
<p><span></span></p><h2>HW3</h2>
<p>HW3 (20%):<span style="background-color: #ffff00;">建立 Webots 桌上籃球遊戲機模擬系統</span></p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 HW3 - 學員學號</p>
<p><span style="background-color: #00ffff;">hw3作業壓縮檔:</span></p>
<p><span><a href="/downloads/41223113-HW3.7z">/downloads/41223113-HW3.7z</a></span></p>
<p><span style="background-color: #00ffff;">hw3-webots操作影片</span></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/CScIgcI-6Ks" width="560"></iframe></p>
<p><span style="background-color: #ffcc00;">hw3作業題問解答:</span></p>
<p>Tutorial6 相關提問</p>
<p></p>
<p>主要學習主題?</p>
<p>Tutorial6 主要學習如何在 Webots 中為 e-puck 機器人新增攝影機（Camera）裝置，並透過程式控制攝影機，取得影像資料，進而讓機器人能依據視覺資訊做出反應。</p>
<p>e-puck 機器人新增裝置?</p>
<p>在本單元，e-puck 機器人新增了攝影機（Camera）裝置。</p>
<p>如何在 Webots 中使用攝影機（Camera）?</p>
<p>需在機器人結構中加入 Camera 節點，設定好名稱、位置與方向。然後在控制器程式中取得 Camera 物件並啟用。</p>
<p>Camera 需要在程式中如何啟用?</p>
<p>需呼叫 camera-&gt;enable(TIME_STEP)（C++）或 wb_camera_enable(camera, TIME_STEP)（C）來啟用攝影機，TIME_STEP 是模擬步進時間。</p>
<p>如何取得攝影機擷取到的影像資料?</p>
<p>啟用攝影機後，可用 camera-&gt;getImage()（C++）或 wb_camera_get_image(camera)（C）取得影像資料。</p>
<p>機器人如何依據攝影機影像做出反應?</p>
<p>可根據影像中的顏色、形狀等資訊進行分析，然後調整機器人行為（如移動方向、速度等）。</p>
<p>Camera 裝置可以調整哪些參數?</p>
<p>可調整解析度（寬、高）、視場角（FOV）、更新頻率等。</p>
<p>影像解析度的設定會對模擬有什麼影響?</p>
<p>解析度越高，影像越清晰，但會增加運算負擔，降低模擬效率。</p>
<p>如何將攝影機影像儲存成圖片檔?</p>
<p>可將取得的影像資料存成圖片檔（如 PNG），需用程式將影像 buffer 轉存為檔案，通常會用到額外的影像處理函式庫。</p>
<p>若攝影機影像顯示異常，可能的原因?</p>
<p>常見原因有：Camera 節點未正確加入、名稱不符、未啟用、解析度設置錯誤、Webots 需重啟等。</p>
<p></p>
<p>Tutorial7 相關提問</p>
<p></p>
<p>核心任務?</p>
<p>讓 e-puck 機器人利用攝影機偵測並辨識顏色，進而做出相應行為。</p>
<p>e-puck 機器人如何偵測顏色?</p>
<p>透過攝影機擷取影像後，分析影像像素的顏色資訊。</p>
<p>如何分析攝影機擷取的影像來辨識特定顏色</p>
<p>可逐像素分析 RGB 或 HSV 值，判斷是否落在目標顏色範圍內。</p>
<p>OpenCV 或其他影像處理函式庫的應用方式?</p>
<p>將 Webots 取得的影像資料轉為 OpenCV 可處理的格式（如 Mat），然後用 OpenCV 函式進行顏色過濾、區域偵測等。</p>
<p>如何將影像中的顏色資訊轉換為機器人行為?</p>
<p>分析影像中目標顏色的位置，決定機器人移動方向或速度，實現追蹤等行為。</p>
<p>若要辨識多種顏色，程式需考慮哪些步驟?</p>
<p>需為每種顏色設置對應的閾值範圍，分別進行偵測，並根據偵測結果決定行為優先順序。</p>
<p>如何解決不同光源下顏色偵測的不穩定問題?</p>
<p>可將影像轉換為 HSV 色彩空間，並動態調整閾值，或進行自動白平衡、亮度校正等。</p>
<p>e-puck 機器人如何追蹤影像中的顏色物件?</p>
<p>偵測到目標顏色後，計算其在影像中的位置，調整機器人行進方向，使目標保持在中央。</p>
<p>若影像中有多個同色物件，程式如何選擇追蹤目標?</p>
<p>可選擇面積最大、最靠近中央或最近的物件作為追蹤目標。</p>
<p>Tutorial7 能否應用於現實世界的機器人？需做哪些調整？</p>
<p>可應用於現實機器人，但需考慮真實攝影機的雜訊、光源變化、鏡頭畸變等，並進行相應的校正與調整。</p>
<p></p>
<p>Tutorial8 相關提問</p>
<p></p>
<p>主要學習目標?</p>
<p>學習 Supervisor 控制器的使用，實現對多個機器人或物件的監控與管理。</p>
<p>什麼是 Supervisor？在 Tutorial8 扮演什麼角色？</p>
<p>Supervisor 是一種特殊的控制器，可取得並控制場景中所有物件，負責監督與管理模擬過程。</p>
<p>Supervisor 可以進行哪些操作？</p>
<p>可取得物件狀態、控制物件位置、重設模擬、紀錄數據等。</p>
<p>如何在 Supervisor 控制器中存取並控制其他機器人？</p>
<p>可透過 API 取得機器人節點，然後讀取或改寫其屬性（如位置、狀態）。</p>
<p>如何用 Supervisor 監測機器人是否達到目標區域？</p>
<p>可定期取得機器人座標，判斷是否進入目標區域範圍。</p>
<p>Supervisor 如何重設模擬或重置機器人位置？</p>
<p>可呼叫 Supervisor 的重設函式，或直接設定機器人座標來重置位置。</p>
<p>Supervisor 能否獲取所有物件的座標與狀態？如何實作？</p>
<p>可以，透過遍歷場景樹節點，取得各物件座標與狀態。</p>
<p>如何紀錄機器人模擬過程的數據供日後分析？</p>
<p>Supervisor 可將模擬過程中的關鍵數據（如座標、狀態等）寫入檔案做紀錄。</p>
<p>Supervisor 可以如何協助自動化測試機器人行為？</p>
<p>可自動控制模擬流程、重複測試不同情境，並自動收集結果數據。</p>
<p></p><h1>Midterm</h1>
<p>本課程所繳交的期中成績為學員自評之學習期望成績.</p>
<p>期中考週的自評期望成績繳交流程:</p>
<ol>
<li>整理先前所完成的各週的進度、作業網頁內容以及心得</li>
<li>拍攝期中自評影片, 上傳至 Youtube 後, 以"<span style="background-color: #ffff00;">國立虎尾科技大學 - 機械設計工程系 - cd2025 期中自評- 學員學號</span>"為影片標題後嵌入本頁面中</li>
<li>回填期中自評表單</li>
<li>上傳學員期中成績</li>
</ol>
<p>各週進度:</p>
<p>各週網頁內容:</p>
<p>期中心得:</p>
<p>期中自評影片:</p>
<p></p>
<p style="padding-left: 30px;"></p>
<h1>Exam</h1>
<p>Exam1 (10%): 建立 Webots 基本物件模擬場景</p>
<p style="padding-left: 30px;">各學員利用 Webots R2025a 套件中的 Shape 物件, 隨堂建立指定的機電系統模擬場景, 並利用 Python 程式進行互動控制.</p>
<p>Exam2 (10%): 利用 CAD 零組件建立模擬場景 </p>
<p style="padding-left: 30px;">各學員利用 CAD (Solvespace 與 NX2312), 隨堂建立指定的系統模型零組件後, 導入 Webots R2025a 後, 建立機電系統模擬場景, 並利用 Python 程式進行互動控制.</p>
<p>Exam3 (20%): Webots 機電模擬場景的協同設計</p>
<p style="padding-left: 30px;">各分組利用 CAD (Solvespace 與 NX2312), 隨堂建立指定的系統模型零組件後, 導入 Webots R2025a 後, 建立機電系統模擬場景, 並利用 Python 程式進行互動控制. 過程中各學員必須採同步協同模式, 維護從 Github Classroom 取得的分組協同倉儲以及網站.</p>
<p style="padding-left: 30px;">協同分組方式:</p>
<ol>
<li>分配學員負責利用 Solvespace 建立系統零組件, 過程中必須將所建構之零組件檔案與繪圖過程影片上傳至分組網頁.</li>
<li>分配學員負責利用 NX2312 建立系統零組件, 過程中必須將所建構之零組件檔案與繪圖過程影片上傳至分組網頁.</li>
<li>分配學員負責利用 Webots 建立機電系統模擬場景, 並利用 Python 程式進行控制, 過程中必須將建構過程拍成帶有說明字幕的影片上傳至分組網頁.</li>
</ol>
<h2>Exam1</h2>
<p>Exam1 (10%): 建立 Webots 基本物件模擬場景</p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam1 - 41223113</p>
<p><span style="background-color: #00ffff;">紅色連桿旋轉角度為個人學號最後兩碼:13</span></p>
<p><span style="background-color: #00ffff;">exam1 webots操作影片</span></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/qpJgXUi2FlQ" width="560"></iframe></p>
<p>hw2</p><h2>Exam2</h2>
<p>Exam2 (10%): 利用 CAD 零組件建立模擬場景</p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam2 - 41223113</p>
<p><span style="background-color: #00ffff;">個人學號最後兩碼:13，<span>最短桿的長度,設為 1.13 m，角度為13 degree</span></span></p>
<p><span style="background-color: #00ffff;">exam2 webots操作影片</span></p>
<p><span style="background-color: #ffff00;">此影片因為程式和設定關係無法轉動</span></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/vD3zQ5WNSOc" width="560"></iframe></p>
<p><span style="background-color: #00ffff;">exam2 webots操作影片-修正版</span></p>
<p><span style="background-color: #ffff00;"><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/l2Gec6rAl_o" width="560"></iframe></span></p>
<p><span style="background-color: #ffcc00;">心得:</span></p>
<p><span style="background-color: #ffffff;">再從slvs轉成obj的時候，因為blender轉檔的過程單位不一樣導致模擬過程中零件要對應的位置不一樣，所以模擬不出來，轉而使用程式碼修正確保單位一致，避免模擬過程中零件不轉動。</span></p>
<h2>Exam3</h2>
<p>Exam3 (20%): Webots 機電模擬場景的協同設計</p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam3-1、2、3 - 41223113</p>
<p><span style="background-color: #ffcc00;">exam3-1:</span></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/Kd8CxmdMgzY" width="560"></iframe></p>
<p><span style="background-color: #ffcc00;">exam3-2:</span></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/6sMhFiDpaZE" width="560"></iframe></p>
<p><span style="background-color: #00ccff;">*第二則影片補充瀏覽器畫面</span></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/z-KECbSe5Vc" width="560"></iframe></p>
<p><span style="background-color: #ffcc00;">exam3-3:</span></p>
<p><span style="color: #000000; background-color: #ffcc00;">重要補充:</span></p>
<p><span>由於沒有ipv6所以由其中一位組員為中心製作其餘在旁一起協助</span></p><h1>Final</h1>
<p><span>期末協同專案執行過程影片、簡報與 PDf 報告檔案 (六人一組) (30%)</span></p>
<p><span>題目: <span style="background-color: #ccffcc;">Webots 動態投籃模擬系統的協同設計</span></span></p>
<p><span>說明: </span></p>
<p style="padding-left: 30px;"><span>籃框架被配置在一定範圍內, 可隨機慢速前進、後退及左右擺動, 投籃機構系統帶有一定數量的籃球, 被配置在可自由移動的輪車上.</span></p>
<p style="padding-left: 30px;"><span>操作者可利用鍵盤特定按鍵控制投籃輪車的移動並發射投籃, 每投出一球後系統透過記分板進行計分, 並由送球機構進行補球或移動輪車取球, 遊戲可進行至全部數量籃球投完為止.</span></p>
<p>請將期末協同專案執行過程、內容與心得, 製作成影片，配合字幕上傳至 Youtube 後嵌入各階段的期末報告頁面中.</p>
<p>影片標題: <span style="background-color: #ffff00;">國立虎尾科技大學 - 機械設計工程系 - cd2025 期末報告 - 學員學號 - 各階段影片主題<br/></span></p>
<h1>Brython</h1>
<p><button id="add1to100">1 add to 100</button></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>